cmake_minimum_required(VERSION 2.8.8)
project(october)

set (october_VERSION_MAJOR 0)
set (october_VERSION_MINOR 1)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/include")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

if(CMAKE_COMPILER_IS_GNUCXX)
    if (NOT WIN32)
        add_definitions(-fPIC)
    endif()
    add_definitions(-O3)
    add_definitions(-g)
    add_definitions(-std=c++14)
    add_definitions(-Wall)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-local-typedefs)
    add_definitions(-Wno-maybe-uninitialized)
    add_definitions(-Wno-deprecated-declarations)
    #add_definitions(-U__STRICT_ANSI__)
    add_definitions(-DM_LOG2E=1.44269504088896340736)
    #add_definitions(-DOCTOBER_DEBUG)
endif()

# mandatory
find_package(Eigen)
find_package(OpenCV COMPONENTS core imgproc highgui)
find_package(Boost COMPONENTS system filesystem program_options)

# optional
find_package(Cereal)
find_package(OpenCascade)
find_package(IfcOpenShell)
find_package(OpenMesh)
find_package(PCL COMPONENTS common io)
find_package(PrimitiveDetection)
find_package(E57PCL)

file (GLOB_RECURSE obj RELATIVE "${PROJECT_SOURCE_DIR}" "src/*.cpp")
if (EIGEN_FOUND AND OPENCV_CORE_FOUND AND OPENCV_IMGPROC_FOUND AND OPENCV_HIGHGUI_FOUND AND Boost_FOUND)
    include_directories(${EIGEN_INCLUDE_DIRS})
    include_directories(${OpenCV_INCLUDE_DIRS})
    include_directories(${Boost_INCLUDE_DIRS})

    if(CEREAL_FOUND)
        include_directories(${CEREAL_INCLUDE_DIR})
        add_definitions(-DWITH_CEREAL)
    endif(CEREAL_FOUND)

    if(OPENCASCADE_FOUND AND IFCOPENSHELL_FOUND)
        include_directories(${OPENCASCADE_INCLUDE_DIR})
        include_directories(${IFCOPENSHELL_INCLUDE_DIR})
        add_definitions(-DWITH_IFCOPENSHELL)
    else()
        set(OPENCASCADE_LIBRARIES "")
        set(IFCOPENSHELL_LIBRARIES "")
    endif(OPENCASCADE_FOUND AND IFCOPENSHELL_FOUND)

    if(PCL_FOUND AND PRIMITIVE_DETECTION_FOUND)
        include_directories(${PCL_INCLUDE_DIRS})
        include_directories(${PRIMITIVE_DETECTION_INCLUDE_DIRS})
        add_definitions(-DWITH_PCL)
        add_definitions(-DWITH_PRIMITIVE_DETECTION)
    else()
        set(PCL_LIBRARIES "")
        set(PRIMITIVE_DETECTION_LIBRARIES "")
    endif(PCL_FOUND AND PRIMITIVE_DETECTION_FOUND)

    if(OPENMESH_FOUND)
        include_directories(${OPENMESH_INCLUDE_DIR})
        add_definitions(-DWITH_OPENMESH)
    else()
        set(OPENMESH_LIBRARIES "")
    endif(OPENMESH_FOUND)
    
    if(E57PCL_FOUND)
        include_directories(${E57PCL_INCLUDE_DIRS})
        add_definitions(-DWITH_E57PCL)
    else()
        set(E57PCL_LIBRARIES "")
    endif(E57PCL_FOUND)

    add_library(october SHARED ${obj})
    target_link_libraries(october ${OpenCV_LIBRARIES} ${Boost_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${IFCOPENSHELL_LIBRARIES} ${OPENMESH_LIBRARIES} ${PCL_LIBRARIES} ${E57PCL_LIBRARIES} ${PRIMITIVE_DETECTION_LIBRARIES} "dl")

    # install binary
    if (WIN32)
        install (FILES "${PROJECT_BINARY_DIR}/liboctober.dll.a" DESTINATION lib)
        #install (FILES "${PROJECT_BINARY_DIR}/liboctober.dll" DESTINATION lib)
        install (FILES "${PROJECT_BINARY_DIR}/liboctober.dll" DESTINATION bin)
    else()
        install (TARGETS october DESTINATION lib)
    endif()

    # install header
    install (DIRECTORY include/ DESTINATION include/october)
    
    # install find module
    file (GLOB find_modules RELATIVE "${PROJECT_SOURCE_DIR}" "cmake/modules/self/*.cmake")
    install (FILES ${find_modules} DESTINATION share/october)
endif()
